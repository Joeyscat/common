// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/message.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HeartBeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartBeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartBeatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartBeatRequestMultiError, or nil if none found.
func (m *HeartBeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartBeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartBeatRequestMultiError(errors)
	}

	return nil
}

// HeartBeatRequestMultiError is an error wrapping multiple validation errors
// returned by HeartBeatRequest.ValidateAll() if the designated constraints
// aren't met.
type HeartBeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartBeatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartBeatRequestMultiError) AllErrors() []error { return m }

// HeartBeatRequestValidationError is the validation error returned by
// HeartBeatRequest.Validate if the designated constraints aren't met.
type HeartBeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartBeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartBeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartBeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartBeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartBeatRequestValidationError) ErrorName() string { return "HeartBeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartBeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartBeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartBeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartBeatRequestValidationError{}

// Validate checks the field values on HeartBeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartBeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartBeatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartBeatResponseMultiError, or nil if none found.
func (m *HeartBeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartBeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartBeatResponseMultiError(errors)
	}

	return nil
}

// HeartBeatResponseMultiError is an error wrapping multiple validation errors
// returned by HeartBeatResponse.ValidateAll() if the designated constraints
// aren't met.
type HeartBeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartBeatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartBeatResponseMultiError) AllErrors() []error { return m }

// HeartBeatResponseValidationError is the validation error returned by
// HeartBeatResponse.Validate if the designated constraints aren't met.
type HeartBeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartBeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartBeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartBeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartBeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartBeatResponseValidationError) ErrorName() string {
	return "HeartBeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartBeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartBeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartBeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartBeatResponseValidationError{}

// Validate checks the field values on NVector3 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NVector3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NVector3 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NVector3MultiError, or nil
// if none found.
func (m *NVector3) ValidateAll() error {
	return m.validate(true)
}

func (m *NVector3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	if len(errors) > 0 {
		return NVector3MultiError(errors)
	}

	return nil
}

// NVector3MultiError is an error wrapping multiple validation errors returned
// by NVector3.ValidateAll() if the designated constraints aren't met.
type NVector3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NVector3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NVector3MultiError) AllErrors() []error { return m }

// NVector3ValidationError is the validation error returned by
// NVector3.Validate if the designated constraints aren't met.
type NVector3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NVector3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NVector3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NVector3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NVector3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NVector3ValidationError) ErrorName() string { return "NVector3ValidationError" }

// Error satisfies the builtin error interface
func (e NVector3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNVector3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NVector3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NVector3ValidationError{}

// Validate checks the field values on NEntity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NEntity with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NEntityMultiError, or nil if none found.
func (m *NEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *NEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NEntityValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NEntityValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NEntityValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDirection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NEntityValidationError{
					field:  "Direction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NEntityValidationError{
					field:  "Direction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDirection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NEntityValidationError{
				field:  "Direction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Speed

	if len(errors) > 0 {
		return NEntityMultiError(errors)
	}

	return nil
}

// NEntityMultiError is an error wrapping multiple validation errors returned
// by NEntity.ValidateAll() if the designated constraints aren't met.
type NEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NEntityMultiError) AllErrors() []error { return m }

// NEntityValidationError is the validation error returned by NEntity.Validate
// if the designated constraints aren't met.
type NEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NEntityValidationError) ErrorName() string { return "NEntityValidationError" }

// Error satisfies the builtin error interface
func (e NEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NEntityValidationError{}

// Validate checks the field values on NCharacter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NCharacter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NCharacter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NCharacterMultiError, or
// nil if none found.
func (m *NCharacter) ValidateAll() error {
	return m.validate(true)
}

func (m *NCharacter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Tid

	// no validation rules for EntityId

	// no validation rules for Name

	// no validation rules for Level

	// no validation rules for Exp

	// no validation rules for SpaceId

	// no validation rules for Gold

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NCharacterValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NCharacterValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NCharacterValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hp

	// no validation rules for Mp

	// no validation rules for Type

	if len(errors) > 0 {
		return NCharacterMultiError(errors)
	}

	return nil
}

// NCharacterMultiError is an error wrapping multiple validation errors
// returned by NCharacter.ValidateAll() if the designated constraints aren't met.
type NCharacterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NCharacterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NCharacterMultiError) AllErrors() []error { return m }

// NCharacterValidationError is the validation error returned by
// NCharacter.Validate if the designated constraints aren't met.
type NCharacterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NCharacterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NCharacterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NCharacterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NCharacterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NCharacterValidationError) ErrorName() string { return "NCharacterValidationError" }

// Error satisfies the builtin error interface
func (e NCharacterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNCharacter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NCharacterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NCharacterValidationError{}

// Validate checks the field values on SkillInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkillInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkillInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkillInfoMultiError, or nil
// if none found.
func (m *SkillInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SkillInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Level

	if len(errors) > 0 {
		return SkillInfoMultiError(errors)
	}

	return nil
}

// SkillInfoMultiError is an error wrapping multiple validation errors returned
// by SkillInfo.ValidateAll() if the designated constraints aren't met.
type SkillInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkillInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkillInfoMultiError) AllErrors() []error { return m }

// SkillInfoValidationError is the validation error returned by
// SkillInfo.Validate if the designated constraints aren't met.
type SkillInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkillInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkillInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkillInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkillInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkillInfoValidationError) ErrorName() string { return "SkillInfoValidationError" }

// Error satisfies the builtin error interface
func (e SkillInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkillInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkillInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkillInfoValidationError{}

// Validate checks the field values on NEntitySync with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NEntitySync) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NEntitySync with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NEntitySyncMultiError, or
// nil if none found.
func (m *NEntitySync) ValidateAll() error {
	return m.validate(true)
}

func (m *NEntitySync) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NEntitySyncValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NEntitySyncValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NEntitySyncValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for Force

	if len(errors) > 0 {
		return NEntitySyncMultiError(errors)
	}

	return nil
}

// NEntitySyncMultiError is an error wrapping multiple validation errors
// returned by NEntitySync.ValidateAll() if the designated constraints aren't met.
type NEntitySyncMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NEntitySyncMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NEntitySyncMultiError) AllErrors() []error { return m }

// NEntitySyncValidationError is the validation error returned by
// NEntitySync.Validate if the designated constraints aren't met.
type NEntitySyncValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NEntitySyncValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NEntitySyncValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NEntitySyncValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NEntitySyncValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NEntitySyncValidationError) ErrorName() string { return "NEntitySyncValidationError" }

// Error satisfies the builtin error interface
func (e NEntitySyncValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNEntitySync.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NEntitySyncValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NEntitySyncValidationError{}

// Validate checks the field values on SpaceEntitySyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceEntitySyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceEntitySyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceEntitySyncRequestMultiError, or nil if none found.
func (m *SpaceEntitySyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceEntitySyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntitySync()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceEntitySyncRequestValidationError{
					field:  "EntitySync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceEntitySyncRequestValidationError{
					field:  "EntitySync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitySync()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceEntitySyncRequestValidationError{
				field:  "EntitySync",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceEntitySyncRequestMultiError(errors)
	}

	return nil
}

// SpaceEntitySyncRequestMultiError is an error wrapping multiple validation
// errors returned by SpaceEntitySyncRequest.ValidateAll() if the designated
// constraints aren't met.
type SpaceEntitySyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceEntitySyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceEntitySyncRequestMultiError) AllErrors() []error { return m }

// SpaceEntitySyncRequestValidationError is the validation error returned by
// SpaceEntitySyncRequest.Validate if the designated constraints aren't met.
type SpaceEntitySyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceEntitySyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceEntitySyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceEntitySyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceEntitySyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceEntitySyncRequestValidationError) ErrorName() string {
	return "SpaceEntitySyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceEntitySyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceEntitySyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceEntitySyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceEntitySyncRequestValidationError{}

// Validate checks the field values on SpaceEntitySyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceEntitySyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceEntitySyncResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceEntitySyncResponseMultiError, or nil if none found.
func (m *SpaceEntitySyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceEntitySyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntitySync()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceEntitySyncResponseValidationError{
					field:  "EntitySync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceEntitySyncResponseValidationError{
					field:  "EntitySync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitySync()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceEntitySyncResponseValidationError{
				field:  "EntitySync",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceEntitySyncResponseMultiError(errors)
	}

	return nil
}

// SpaceEntitySyncResponseMultiError is an error wrapping multiple validation
// errors returned by SpaceEntitySyncResponse.ValidateAll() if the designated
// constraints aren't met.
type SpaceEntitySyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceEntitySyncResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceEntitySyncResponseMultiError) AllErrors() []error { return m }

// SpaceEntitySyncResponseValidationError is the validation error returned by
// SpaceEntitySyncResponse.Validate if the designated constraints aren't met.
type SpaceEntitySyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceEntitySyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceEntitySyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceEntitySyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceEntitySyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceEntitySyncResponseValidationError) ErrorName() string {
	return "SpaceEntitySyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceEntitySyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceEntitySyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceEntitySyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceEntitySyncResponseValidationError{}

// Validate checks the field values on GameEnterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameEnterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameEnterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameEnterRequestMultiError, or nil if none found.
func (m *GameEnterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameEnterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	if len(errors) > 0 {
		return GameEnterRequestMultiError(errors)
	}

	return nil
}

// GameEnterRequestMultiError is an error wrapping multiple validation errors
// returned by GameEnterRequest.ValidateAll() if the designated constraints
// aren't met.
type GameEnterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameEnterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameEnterRequestMultiError) AllErrors() []error { return m }

// GameEnterRequestValidationError is the validation error returned by
// GameEnterRequest.Validate if the designated constraints aren't met.
type GameEnterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameEnterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameEnterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameEnterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameEnterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameEnterRequestValidationError) ErrorName() string { return "GameEnterRequestValidationError" }

// Error satisfies the builtin error interface
func (e GameEnterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameEnterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameEnterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameEnterRequestValidationError{}

// Validate checks the field values on GameEnterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameEnterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameEnterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameEnterResponseMultiError, or nil if none found.
func (m *GameEnterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameEnterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameEnterResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameEnterResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameEnterResponseValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCharacter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameEnterResponseValidationError{
					field:  "Character",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameEnterResponseValidationError{
					field:  "Character",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameEnterResponseValidationError{
				field:  "Character",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GameEnterResponseMultiError(errors)
	}

	return nil
}

// GameEnterResponseMultiError is an error wrapping multiple validation errors
// returned by GameEnterResponse.ValidateAll() if the designated constraints
// aren't met.
type GameEnterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameEnterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameEnterResponseMultiError) AllErrors() []error { return m }

// GameEnterResponseValidationError is the validation error returned by
// GameEnterResponse.Validate if the designated constraints aren't met.
type GameEnterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameEnterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameEnterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameEnterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameEnterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameEnterResponseValidationError) ErrorName() string {
	return "GameEnterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameEnterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameEnterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameEnterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameEnterResponseValidationError{}

// Validate checks the field values on SpaceCharactersEnterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceCharactersEnterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceCharactersEnterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceCharactersEnterResponseMultiError, or nil if none found.
func (m *SpaceCharactersEnterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceCharactersEnterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceId

	for idx, item := range m.GetCharacterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceCharactersEnterResponseValidationError{
						field:  fmt.Sprintf("CharacterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceCharactersEnterResponseValidationError{
						field:  fmt.Sprintf("CharacterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceCharactersEnterResponseValidationError{
					field:  fmt.Sprintf("CharacterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpaceCharactersEnterResponseMultiError(errors)
	}

	return nil
}

// SpaceCharactersEnterResponseMultiError is an error wrapping multiple
// validation errors returned by SpaceCharactersEnterResponse.ValidateAll() if
// the designated constraints aren't met.
type SpaceCharactersEnterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceCharactersEnterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceCharactersEnterResponseMultiError) AllErrors() []error { return m }

// SpaceCharactersEnterResponseValidationError is the validation error returned
// by SpaceCharactersEnterResponse.Validate if the designated constraints
// aren't met.
type SpaceCharactersEnterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceCharactersEnterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceCharactersEnterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceCharactersEnterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceCharactersEnterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceCharactersEnterResponseValidationError) ErrorName() string {
	return "SpaceCharactersEnterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceCharactersEnterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceCharactersEnterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceCharactersEnterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceCharactersEnterResponseValidationError{}

// Validate checks the field values on SpaceCharacterLeaveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceCharacterLeaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceCharacterLeaveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceCharacterLeaveResponseMultiError, or nil if none found.
func (m *SpaceCharacterLeaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceCharacterLeaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntityId

	if len(errors) > 0 {
		return SpaceCharacterLeaveResponseMultiError(errors)
	}

	return nil
}

// SpaceCharacterLeaveResponseMultiError is an error wrapping multiple
// validation errors returned by SpaceCharacterLeaveResponse.ValidateAll() if
// the designated constraints aren't met.
type SpaceCharacterLeaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceCharacterLeaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceCharacterLeaveResponseMultiError) AllErrors() []error { return m }

// SpaceCharacterLeaveResponseValidationError is the validation error returned
// by SpaceCharacterLeaveResponse.Validate if the designated constraints
// aren't met.
type SpaceCharacterLeaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceCharacterLeaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceCharacterLeaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceCharacterLeaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceCharacterLeaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceCharacterLeaveResponseValidationError) ErrorName() string {
	return "SpaceCharacterLeaveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceCharacterLeaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceCharacterLeaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceCharacterLeaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceCharacterLeaveResponseValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterResponseMultiError, or nil if none found.
func (m *UserRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserRegisterResponseMultiError(errors)
	}

	return nil
}

// UserRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by UserRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterResponseMultiError) AllErrors() []error { return m }

// UserRegisterResponseValidationError is the validation error returned by
// UserRegisterResponse.Validate if the designated constraints aren't met.
type UserRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterResponseValidationError) ErrorName() string {
	return "UserRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterResponseValidationError{}

// Validate checks the field values on UserLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginRequestMultiError, or nil if none found.
func (m *UserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UserLoginRequestMultiError(errors)
	}

	return nil
}

// UserLoginRequestMultiError is an error wrapping multiple validation errors
// returned by UserLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type UserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRequestMultiError) AllErrors() []error { return m }

// UserLoginRequestValidationError is the validation error returned by
// UserLoginRequest.Validate if the designated constraints aren't met.
type UserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRequestValidationError) ErrorName() string { return "UserLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRequestValidationError{}

// Validate checks the field values on UserLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginResponseMultiError, or nil if none found.
func (m *UserLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UserLoginResponseMultiError(errors)
	}

	return nil
}

// UserLoginResponseMultiError is an error wrapping multiple validation errors
// returned by UserLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type UserLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginResponseMultiError) AllErrors() []error { return m }

// UserLoginResponseValidationError is the validation error returned by
// UserLoginResponse.Validate if the designated constraints aren't met.
type UserLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginResponseValidationError) ErrorName() string {
	return "UserLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginResponseValidationError{}

// Validate checks the field values on EntitySyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntitySyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitySyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitySyncResponseMultiError, or nil if none found.
func (m *EntitySyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitySyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntityList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitySyncResponseValidationError{
						field:  fmt.Sprintf("EntityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitySyncResponseValidationError{
						field:  fmt.Sprintf("EntityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitySyncResponseValidationError{
					field:  fmt.Sprintf("EntityList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitySyncResponseMultiError(errors)
	}

	return nil
}

// EntitySyncResponseMultiError is an error wrapping multiple validation errors
// returned by EntitySyncResponse.ValidateAll() if the designated constraints
// aren't met.
type EntitySyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitySyncResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitySyncResponseMultiError) AllErrors() []error { return m }

// EntitySyncResponseValidationError is the validation error returned by
// EntitySyncResponse.Validate if the designated constraints aren't met.
type EntitySyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitySyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitySyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitySyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitySyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitySyncResponseValidationError) ErrorName() string {
	return "EntitySyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EntitySyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitySyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitySyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitySyncResponseValidationError{}

// Validate checks the field values on EntityEnterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityEnterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityEnterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityEnterResponseMultiError, or nil if none found.
func (m *EntityEnterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityEnterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityEnterResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityEnterResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityEnterResponseValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntityEnterResponseMultiError(errors)
	}

	return nil
}

// EntityEnterResponseMultiError is an error wrapping multiple validation
// errors returned by EntityEnterResponse.ValidateAll() if the designated
// constraints aren't met.
type EntityEnterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityEnterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityEnterResponseMultiError) AllErrors() []error { return m }

// EntityEnterResponseValidationError is the validation error returned by
// EntityEnterResponse.Validate if the designated constraints aren't met.
type EntityEnterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityEnterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityEnterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityEnterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityEnterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityEnterResponseValidationError) ErrorName() string {
	return "EntityEnterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EntityEnterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityEnterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityEnterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityEnterResponseValidationError{}

// Validate checks the field values on CharacterCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterCreateRequestMultiError, or nil if none found.
func (m *CharacterCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for JobType

	if len(errors) > 0 {
		return CharacterCreateRequestMultiError(errors)
	}

	return nil
}

// CharacterCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CharacterCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CharacterCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterCreateRequestMultiError) AllErrors() []error { return m }

// CharacterCreateRequestValidationError is the validation error returned by
// CharacterCreateRequest.Validate if the designated constraints aren't met.
type CharacterCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterCreateRequestValidationError) ErrorName() string {
	return "CharacterCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterCreateRequestValidationError{}

// Validate checks the field values on ChracterCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChracterCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChracterCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChracterCreateResponseMultiError, or nil if none found.
func (m *ChracterCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChracterCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCharacter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChracterCreateResponseValidationError{
					field:  "Character",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChracterCreateResponseValidationError{
					field:  "Character",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChracterCreateResponseValidationError{
				field:  "Character",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChracterCreateResponseMultiError(errors)
	}

	return nil
}

// ChracterCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ChracterCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ChracterCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChracterCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChracterCreateResponseMultiError) AllErrors() []error { return m }

// ChracterCreateResponseValidationError is the validation error returned by
// ChracterCreateResponse.Validate if the designated constraints aren't met.
type ChracterCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChracterCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChracterCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChracterCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChracterCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChracterCreateResponseValidationError) ErrorName() string {
	return "ChracterCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChracterCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChracterCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChracterCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChracterCreateResponseValidationError{}

// Validate checks the field values on CharacterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterListRequestMultiError, or nil if none found.
func (m *CharacterListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CharacterListRequestMultiError(errors)
	}

	return nil
}

// CharacterListRequestMultiError is an error wrapping multiple validation
// errors returned by CharacterListRequest.ValidateAll() if the designated
// constraints aren't met.
type CharacterListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterListRequestMultiError) AllErrors() []error { return m }

// CharacterListRequestValidationError is the validation error returned by
// CharacterListRequest.Validate if the designated constraints aren't met.
type CharacterListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterListRequestValidationError) ErrorName() string {
	return "CharacterListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterListRequestValidationError{}

// Validate checks the field values on CharacterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterListResponseMultiError, or nil if none found.
func (m *CharacterListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharacterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterListResponseValidationError{
						field:  fmt.Sprintf("CharacterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterListResponseValidationError{
						field:  fmt.Sprintf("CharacterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterListResponseValidationError{
					field:  fmt.Sprintf("CharacterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CharacterListResponseMultiError(errors)
	}

	return nil
}

// CharacterListResponseMultiError is an error wrapping multiple validation
// errors returned by CharacterListResponse.ValidateAll() if the designated
// constraints aren't met.
type CharacterListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterListResponseMultiError) AllErrors() []error { return m }

// CharacterListResponseValidationError is the validation error returned by
// CharacterListResponse.Validate if the designated constraints aren't met.
type CharacterListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterListResponseValidationError) ErrorName() string {
	return "CharacterListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterListResponseValidationError{}

// Validate checks the field values on CharacterDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterDeleteRequestMultiError, or nil if none found.
func (m *CharacterDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	if len(errors) > 0 {
		return CharacterDeleteRequestMultiError(errors)
	}

	return nil
}

// CharacterDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CharacterDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CharacterDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterDeleteRequestMultiError) AllErrors() []error { return m }

// CharacterDeleteRequestValidationError is the validation error returned by
// CharacterDeleteRequest.Validate if the designated constraints aren't met.
type CharacterDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterDeleteRequestValidationError) ErrorName() string {
	return "CharacterDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterDeleteRequestValidationError{}

// Validate checks the field values on CharacterDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterDeleteResponseMultiError, or nil if none found.
func (m *CharacterDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CharacterDeleteResponseMultiError(errors)
	}

	return nil
}

// CharacterDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by CharacterDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type CharacterDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterDeleteResponseMultiError) AllErrors() []error { return m }

// CharacterDeleteResponseValidationError is the validation error returned by
// CharacterDeleteResponse.Validate if the designated constraints aren't met.
type CharacterDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterDeleteResponseValidationError) ErrorName() string {
	return "CharacterDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterDeleteResponseValidationError{}
